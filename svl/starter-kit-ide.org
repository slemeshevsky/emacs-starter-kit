#+TITLE: Emacs IDE configuration
* Включение режимов подсветки
** Режим =cmake-mode=
  #+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
  #+end_src
** Режим =python-mode= для ~mako~
#+begin_src emacs-lisp

(add-to-list 'auto-mode-alist '("mako?" . python-mode))
#+end_src

** Режим =python-mode= для ~.ufl~
  #+begin_src emacs-lisp
(setq auto-mode-alist
	  (append
	   '(("\\.ufl\\'" . python-mode))
	   auto-mode-alist))
  #+end_src
** Режим =makefile-mode= для ~.pro~ и ~.pri~
  #+begin_src emacs-lisp
    (setq auto-mode-alist
	      (append
	       '(("\\.pro\\'" . makefile-mode))
	       auto-mode-alist))
    (setq auto-mode-alist
	      (append
	       '(("\\.pri\\'" . makefile-mode))
	       auto-mode-alist))
    ;; (setq auto-mode-alist
    ;; 	  (append
    ;; 	   '(("\\.geo\\'" . makefile-mode))
    ;; 	   auto-mode-alist))
  #+end_src
** Режим =c++-mode= для ~.h~, ~.cpp~, ~.cxx~
  #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cxx\\'" . c++-mode))
  #+end_src

* Включение =Eassist=
  #+begin_src emacs-lisp
;; (require 'eassist)
  #+end_src
* Настройка =function-args=
  #+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/src/function-args")
  (require 'function-args)
  (fa-config-default)
  #+end_src
* Настройка =ivy=
#+begin_src emacs-lisp
(use-package counsel
  :diminish ivy-mode counsel-mode
  :defines projectile-completion-system
  :bind
  (("C-s" . swiper)
   ("C-x C-f" . counsel-find-file)
   ("C-c v" . ivy-push-view)
   ("C-c V" . ivy-pop-view)
   ("<f2>" . ivy-switch-buffer))
  :hook
  (after-init . ivy-mode)
  (ivy-mode . counsel-mode)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-height 10)
  (ivy-count-format "(%d/%d) ")
  (ivy-extra-directories nil))
#+end_src
* Настройка =helm=
** Подключение =helm=
#+begin_src emacs-lisp
  ;; (require 'helm)
  ;; (require 'helm-config)
#+end_src
** Меняем префикс
#+begin_src emacs-lisp
  ;; (global-unset-key (kbd "C-c h"))
  ;; (global-set-key (kbd "C-c h") 'helm-command-prefix)
#+end_src
** Другие настройки =helm=
#+begin_src emacs-lisp
  ;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  ;; (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z
  ;; (global-set-key (kbd "<f2>") 'helm-buffers-list)

  ;; (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
  ;;       helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
  ;;       helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  ;;       helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
  ;;       helm-ff-file-name-history-use-recentf t)
  ;; (helm-autoresize-mode t)
  ;; (helm-mode 1)
#+end_src
* Настройка =helm-gtags=
#+begin_src emacs-lisp
;(require 'helm-gtags)
;(custom-set-variables
; '(helm-gtags-ignore-case t)
; '(helm-gtags-auto-update t)
; '(helm-gtags-use-input-at-cursor t)
; '(helm-gtags-pulse-at-cursor t)
; '(helm-gtags-prefix-key (kbd "C-c g"))
; '(helm-gtags-suggested-key-mapping 1)
;)
#+end_src
** Включение режима =helm-gtags=
#+begin_src emacs-lisp
;(add-hook 'c-mode-hook 'helm-gtags-mode)
;(add-hook 'c++-mode-hook 'helm-gtags-mode)
;(add-hook 'eshell-mode-hook 'helm-gtags-mode)
#+end_src
** Настройка клавиш
#+begin_src emacs-lisp
;(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
;(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
;(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
;(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
;(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+end_src
* Настройка =ggtags=
#+begin_src emacs-lisp
(require 'ggtags)
#+end_src
** Включение режима =ggtags=
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))
(setq-local imenu-create-index-function #'ggtags-build-imenu-index)
#+end_src
** Настройка клавиш
#+begin_src emacs-lisp
(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+end_src
* Настройка =projectile=
** Включение =projectile=
#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :bind-keymap 
  ("C-c p" . projectile-command-map)
  :bind
  ("<f7>" . projectile-grep)
  :config
  (setq projectile-completion-system 'ivy)
  (projectile-mode +1))
#+end_src
** Интеграция с =perspective=
#+begin_src emacs-lisp
  ;; (persp-mode)
  ;; (require 'persp-projectile)
  ;; (define-key projectile-mode-map (kbd "M-<f9>") 'projectile-persp-switch-project)
#+end_src
* Настройка =counsel-projectile=
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode 1))
#+end_src
* Настройка =helm-projectile=
#+begin_src emacs-lisp
  ;; (use-package helm-projectile
  ;;   :init 
  ;;   (setq projectile-completion-system 'helm)
  ;;   :hook
  ;;   ((after-init . helm-projectile-on)))
#+end_src
* Настройка =persp-mode=
[[https://github.com/Bad-ptr/persp-mode.el][Проект на Github]]
** Включение
#+begin_src emacs-lisp
(use-package persp-mode
  :diminish
  :defines ivy-sort-functions-alist
  :commands (get-current-persp persp-contain-buffer-p persp-add persp-by-name-and-exists)
  :hook 
  ((after-init . persp-mode))
  :custom
  (persp-keymap-prefix (kbd "C-c w"))
  (persp-nil-name "main")
  (persp-set-last-persp-for-new-frames nil)
  (persp-auto-resume-time 0)
  :config
  ;; NOTE: Redefine `persp-add-new' to address.
  ;; Issue: Unable to create/handle persp-mode
  ;; https://github.com/Bad-ptr/persp-mode.el/issues/96
  ;; https://github.com/Bad-ptr/persp-mode-projectile-bridge.el/issues/4
  ;; https://emacs-china.org/t/topic/6416/7
  (defun* persp-add-new (name &optional (phash *persp-hash*))
    "Create a new perspective with the given `NAME'. Add it to `PHASH'.
    Return the created perspective."
    (interactive "sA name for the new perspective: ")
    (if (and name (not (equal "" name)))
        (destructuring-bind (e . p)
            (persp-by-name-and-exists name phash)
          (if e p
            (setq p (if (equal persp-nil-name name)
                        nil (make-persp :name name)))
            (persp-add p phash)
            (run-hook-with-args 'persp-created-functions p phash)
            p))
      (message "[persp-mode] Error: Can't create a perspective with empty name.")
      nil))
   (add-to-list 'global-mode-string
               '(:eval
                 (format
                  (propertize
                   " #%s "
                   'face (let ((persp (get-current-persp)))
                           (if persp
                               (if (persp-contain-buffer-p (current-buffer) persp)
                                   'persp-face-lighter-default
                                 'persp-face-lighter-buffer-not-in-persp)
                             'persp-face-lighter-nil-persp)))
                  (safe-persp-name (get-current-persp)))))

    (with-eval-after-load "ivy"
      (add-hook 'ivy-ignore-buffers
                #'(lambda (b)
                    (when persp-mode
                      (let ((persp (get-current-persp)))
                        (if persp
                            (not (persp-contain-buffer-p b persp))
                          nil)))))

      (setq ivy-sort-functions-alist
            (append ivy-sort-functions-alist
                    '((persp-kill-buffer   . nil)
                      (persp-remove-buffer . nil)
                      (persp-add-buffer    . nil)
                      (persp-switch        . nil)
                      (persp-window-switch . nil)
                      (persp-frame-switch  . nil))))))
#+end_src
** Интеграция с =projectile=
[[https://github.com/Bad-ptr/persp-mode-projectile-bridge.el][persp-mode-projectile-bridge на Github]]
#+begin_src emacs-lisp
(use-package pesrsp-mode-projectile-bridge
  :after projectile persp-mode
  :commands (persp-mode-projectile-bridge-find-perspectives-for-all-buffers 
             persp-mode-projectile-bridge-kill-perspectives)
  :hook
  (after-init . persp-mode-projectile-bridge-mode))
#+end_src

* Настройка режима компиляции
** Клавиша для компиляции
#+begin_src emacs-lisp
(global-set-key (kbd "<f9>") (lambda ()
                              (interactive)
                              (setq-local compilation-read-command nil)
                              (call-interactively 'projectile-compile-project)))
#+end_src
** Навигация только по ошибкам, пропуская предупреждения
#+begin_src emacs-lisp
(setq compilation-skip-threshold 2)
#+end_src
** Размер окна компиляции в 8 строк
     #+begin_src emacs-lisp
(setq compilation-window-height 8)
     #+end_src
** Автоматический скроллинг окна компиляции
#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src
** Автоматически закрывать окно компиляции, если компиляция прошла без ошибок
	 #+begin_src emacs-lisp
 ;; Close the compilation window if there was no error at all.
(setq compilation-exit-message-function
      (lambda (status code msg)
        ;; If M-x compile exists with a 0
        (when (and (eq status 'exit) (zerop code))
          ;; then bury the *compilation* buffer, so that C-x b doesn't go there
    	(bury-buffer "*compilation*")
	    ;; and return to whatever were looking at before
        (replace-buffer-in-windows "*compilation*"))
;        (delete-other-windows))
        ;; Always return the anticipated result of compilation-exit-message-function
	  (cons msg code)))
	 #+end_src

* Настройка =all-the-icons=
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
* Настройка =neotree=
#+begin_src emacs-lisp
(use-package neotree
  :after projectile
  :custom
  (neo-theme 'icons)
  :bind ("<f5>" . neotree-toggle))
  :config
  (setq neo-smart-open t)
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src
* Настройка =cedet=
** Включение =Semantic=
*** Перед включением ~Semantic~ необходимо заполнить список ~semantic-default-submodes~
**** Включение глобальной поддержки ~Semanticmdb~
#+begin_src emacs-lisp 
  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
#+end_src
**** Включение режима автоматического запоминания информации о редактируемых тагах
     Перейти к ним можно будет позднее с помощью команды ~semantic-mrub-switch-tags~
     #+begin_src emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
      #+end_src
**** Активация подстветки первой строки текущего тага (функции, класса и т.п.)
     #+begin_src emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
     #+end_src
**** Активация автоматического анализа кода в буферах когда Emacs «свободен» и ожидает ввода данных от пользователя (idle time) 
     #+begin_src emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
     #+end_src
**** Активация показа возможных дополнений имен во время ожидания ввода
     Требует чтобы был включен ~global-semantic-idle-scheduler-mode~
     #+begin_src emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
     #+end_src
**** Активация показа информации о текущем таге во время ожидания ввода
     Требует чтобы был включен ~global-semantic-idle-scheduler-mode~ 
     #+begin_src emacs-lisp
(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
     #+end_src
*** Для использования  возможности по дополнению имен и показу информации о функциях и классах необходимо загрузить пакет ~semantic/ia~
    #+begin_src emacs-lisp
(require 'semantic/ia)
    #+end_src
*** Включаем ~Semantic~
    #+begin_src emacs-lisp
(semantic-mode 1)
;(semantic-load-enable-excessive-code-helpers)
;(global-semantic-tag-folding-mode 1)
    #+end_src
** Загрузка системных пакетов
   Если вы используете ~GCC~ для программирования на ~C~ & ~C++~, то пакет может автоматически получить данные о нахождении системных
   подключаемых файлов. Для этого вам необходимо загрузить пакет
   ~semantic/bovine/gcc~:
   #+begin_src emacs-lisp
     (require 'semantic/bovine/c)
     (require 'semantic/bovine/gcc)
     (require 'semantic/wisent/python)
   #+end_src
** Настройка =Semanticdb=
*** Настройка CEDET для работы с библиотекой Qt4
    #+begin_src emacs-lisp
      ;; (setq qt4-base-dir "/usr/include/qt4")
      ;; (setq qwt-base-dir "/usr/include/qwt")
      ;; (semantic-add-system-include qt4-base-dir 'c++-mode)
      ;; (semantic-add-system-include qt4-base-dir 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtCore") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtCore") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/Qt3Support") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/Qt3Support") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDBus") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDBus") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDeclarative") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDeclarative") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDesiner") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtDesiner") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtGui") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtGui") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtHelp") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtHelp") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtNetwork") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtNetwork") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtOpenGL") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtOpenGL") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtScript") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtScript") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtScriptTools") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtScriptTools") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtSql") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtSql") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtSvg") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtSvg") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtTest") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtTest") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtUiTools") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtUiTools") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtWebKit") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtWebKit") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtXml") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtXml") 'c-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtXmlPatterns") 'c++-mode)
      ;; (semantic-add-system-include (concat qt4-base-dir "/QtXmlPatterns") 'c-mode)
      ;; (semantic-add-system-include qwt-base-dir 'c++-mode)
      ;; (semantic-add-system-include qwt-base-dir 'c-mode)
      ;; (add-to-list 'auto-mode-alist (cons qt4-base-dir 'c++-mode))
      ;; (add-to-list 'auto-mode-alist (cons qt4-base-dir 'c-mode))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig.h"))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qconfig-dist.h"))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt4-base-dir "/Qt/qglobal.h"))
    #+end_src
*** Настройка CEDET для работы с библиотекой ITK-4.5
    #+begin_src emacs-lisp
      ;; (setq itk-base-dir "/usr/include/ITK-4.5")
      ;; (semantic-add-system-include itk-base-dir 'c++-mode)
      ;; (semantic-add-system-include itk-base-dir 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/blas") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/blas") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/datapac") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/datapac") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/egcs") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/egcs") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/eispac") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/eispac") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/emulation") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/emulation") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gcc") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gcc") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gcc-libstdcxx-v3") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gcc-libstdcxx-v3") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gdcmjpeg") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/gdcmjpeg") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/generic") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/generic") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/internal") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/internal") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/iso") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/iso") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkfdstream") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkfdstream") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkhdf5") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkhdf5") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkjpeg") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkjpeg") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkpng") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkpng") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itksys") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itksys") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkzlib") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/itkzlib") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/lapack") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/lapack") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/laso") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/laso") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/linpack") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/linpack") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/mathews") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/mathews") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/minpack") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/minpack") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/mwerk") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/mwerk") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/napack") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/napack") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/opt") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/opt") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/sgi") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/sgi") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/saprse") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/sparse") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/stlport") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/stlport") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/sunpro") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/sunpro") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/temperton") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/temperton") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/vcl_sys") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/vcl_sys") 'c-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/vnl") 'c++-mode)
      ;; (semantic-add-system-include (concat itk-base-dir "/vnl") 'c-mode)
    #+end_src
*** Настройка CEDET для работы с библиотекой VTK-5.8
    #+begin_src emacs-lisp
      ;; (setq vtk-base-dir "/usr/include/vtk-5.8")
      ;; (semantic-add-system-include vtk-base-dir 'c++-mode)
      ;; (semantic-add-system-include vtk-base-dir 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/alglib") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/alglib") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/Cosmo") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/Cosmo") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/internal") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/internal") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/mrmpi") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/mrmpi") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/TclTk") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/TclTk") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/VPIC") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/VPIC") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkexpat") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkexpat") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtklibproj4") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtklibproj4") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkmetaio") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkmetaio") 'c-mode
      ;; )(semantic-add-system-include (concat vtk-base-dir "/vtknetcfd") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtknetcfd") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtksqlite") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtksqlite") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkstd") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtkstd") 'c-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtksys") 'c++-mode)
      ;; (semantic-add-system-include (concat vtk-base-dir "/vtksys") 'c-mode)
    #+end_src
*** Настройка CEDET для работы с библиотекой CGAL
    #+begin_src emacs-lisp
      ;; (setq cgal-base-dir "/usr/include/CGAL")
      ;; (semantic-add-system-include cgal-base-dir 'c++-mode)
      ;; (semantic-add-system-include cgal-base-dir 'c-mode)   
    #+end_src
*** Настройка CEDET для работы с библиотекой Qt5.6.3
    #+begin_src emacs-lisp
      ;; (setq qt563-base-dir "/opt/Qt5.6.3/5.6.3/gcc_64/include")
      ;; (semantic-add-system-include qt563-base-dir 'c++-mode)
      ;; (semantic-add-system-include qt563-base-dir 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtCore") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtCore") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/Qt3Support") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/Qt3Support") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDBus") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDBus") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDeclarative") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDeclarative") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDesiner") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtDesiner") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtGui") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtGui") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtHelp") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtHelp") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtNetwork") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtNetwork") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtOpenGL") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtOpenGL") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtScript") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtScript") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtScriptTools") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtScriptTools") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtSql") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtSql") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtSvg") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtSvg") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtTest") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtTest") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtUiTools") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtUiTools") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtWebKit") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtWebKit") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtXml") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtXml") 'c-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtXmlPatterns") 'c++-mode)
      ;; (semantic-add-system-include (concat qt563-base-dir "/QtXmlPatterns") 'c-mode)
      ;; (add-to-list 'auto-mode-alist (cons qt563-base-dir 'c++-mode))
      ;; (add-to-list 'auto-mode-alist (cons qt563-base-dir 'c-mode))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt563-base-dir "/QtCore/qconfig.h"))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt563-base-dir "/QtCore/qconfig-dist.h"))
      ;; (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat qt563-base-dir "/QtCore/qglobal.h"))
    #+end_src
*** Настройка CEDET для работы с используемыми в MITK библиотеками
#+begin_src emacs-lisp
  ;; (setq mitk-ep-base-dir "~/Projects/Cxx/MITK-superbuild/ep/include")
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ANN") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ANN") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/config") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/config") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/extensions") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/extensions") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/plugin") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/plugin") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/portability") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/portability") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/tools") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/tools") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/ui") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/cppunit/ui") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/config") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/config") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmdata") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmdata") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmfg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmfg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmimage") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmimage") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmimgle") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmimgle") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmiod") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmiod") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmjpeg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmjpeg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmjpls") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmjpls") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmnet") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmnet") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmmap") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmmap") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmstat") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmstat") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmqrdb") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmqrdb") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmrt") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmrt") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmseg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmseg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmsign") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmsign") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmsr") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmsr") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmtls") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmtls") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmtract") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmtract") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmwlm") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/dcmwlm") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/oflog") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/oflog") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/ofstd") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/dcmtk/ofstd") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmcharls") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmcharls") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/12") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/12") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/16") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/16") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/8") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmjpeg/8") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmopenjpeg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/gdcmopenjpeg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/socketxx") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/gdcm-2.6/socketxx") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/GL") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/GL") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Qwt") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Qwt") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/DOM") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/DOM") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Dynamic") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Dynamic") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/JSON") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/JSON") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Net") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Net") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/SAX") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/SAX") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Util") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Util") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/XML") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/XML") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Zip") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/Poco/Zip") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/tinyxml") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/tinyxml") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/GL") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/GL") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/alglib") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/alglib") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkexpat") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkexpat") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkfreetype") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkfreetype") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkgl2ps") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkgl2ps") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkhdf5") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkhdf5") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkjpeg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkjpeg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkjsopcpp") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkjsopcpp") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtklibproj4") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtklibproj4") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtklibxml2") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtklibxml2") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkmetaio") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkmetaio") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtknetcfd") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtknetcfd") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkoggtheora") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkoggtheora") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkpng") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkpng") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtksqlite") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtksqlite") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtksys") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtksys") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtktiff") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtktiff") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkverdict") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkverdict") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkzlib") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/vtk-7.0/vtkzlib") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/arpack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/arpack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/blas") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/blas") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/compilers") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/compilers") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/core") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/core") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/datapac") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/datapac") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/eispack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/eispack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/internal") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/internal") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkfdstream") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkfdstream") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkjpeg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkjpeg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkkwiml") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkkwiml") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkpng") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkpng") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itksys") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itksys") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkzlib") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/itkzlib") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/lapack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/lapack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/laso") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/laso") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/linalg") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/linalg") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/linpack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/linpack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/mathews") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/mathews") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/minpack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/minpack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/napack") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/napack") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/opt") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/opt") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/sparse") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/sparse") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/temperton") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/temperton") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/toms") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/toms") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/vcl_sys") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/vcl_sys") 'c-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/vnl") 'c++-mode)
  ;; (semantic-add-system-include (concat mitk-ep-base-dir "/ITK-4.11/vnl") 'c-mode)
#+end_src
** Привязка клавиш к командам =Semantic=
   #+begin_src emacs-lisp
     ;; (defun svl/cedet-hook()
     ;;   (local-set-key [(control return)] 'semantic-ia-complete-symbol-menu)
     ;;   (local-set-key "\C-c?" 'semantic-ia-complete-symbol)

     ;;   (local-set-key "\C-c>" 'semantic-ia-complete-symbol-analyze-inline)
     ;;   (local-set-key "\C-c=" 'semantic-decoration-include-visit)

     ;;   (local-set-key "\C-cj" 'semantic-ia-fast-jump)
     ;;   (local-set-key "\C-cq" 'semantic-ia-show-doc)
     ;;   (local-set-key "\C-cs" 'semantic-ia-show-summary)
     ;;   (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
     ;;   (local-set-key "\C-cf" 'senator-fold-tag)
     ;;   (local-set-key "\C-cu" 'senator-unfold-tag)
     ;;   (local-set-key "\C-c\C-t" 'senator-fold-tag-toggle)

     ;;   (define-key c++-mode-map (kbd "M-j") 'backward-char)
     ;;   (define-key c++-mode-map (kbd "C-M-j") 'backward-word)
     ;; )

     ;; (defun svl/c-mode-cedet-hook ()
     ;;   (local-set-key "\C-ct" 'eassist-switch-h-cpp)
     ;;   (local-set-key "\C-xt" 'eassist-switch-h-cpp)
     ;;   (local-set-key "\C-ce" 'eassist-list-methods)
     ;;   (local-set-key "\C-c\C-r" 'semantic-symref)
     ;; )

     ;; (add-hook 'c-mode-common-hook 'svl/cedet-hook)
     ;; (add-hook 'c-mode-common-hook 'svl/c-mode-cedet-hook)
  #+end_src
** Включаем поддержку =gnu global=
   #+begin_src emacs-lisp
     ;; (when (cedet-gnu-global-version-check t)
     ;; 	 (semanticdb-enable-gnu-global-databases 'c-mode t)
     ;; 	 (semanticdb-enable-gnu-global-databases 'c++-mode t)
     ;; 	 (semanticdb-enable-gnu-global-databases 'python-mode t)
     ;;   )
   #+end_src
* Настройка =company-mode=
** Активация режима
#+begin_src emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (add-to-list 'company-backends 'company-semantic)
  (add-to-list 'company-backends 'company-gtags)
  (define-key c-mode-map  [(control tab)] 'company-complete)
  (define-key c++-mode-map  [(control tab)] 'company-complete)
#+end_src
** Включение =company-c-headers=
#+begin_src emacs-lisp
 (add-to-list 'company-backends 'company-c-headers)
#+end_src
** Изменение цветовой темы =company=
#+begin_src emacs-lisp
  ;; (require 'color)
  
  ;; (let ((bg (face-attribute 'default :background)))
  ;;   (custom-set-faces
  ;;    `(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 2)))))
  ;;    `(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
  ;;    `(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
  ;;    `(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
  ;;    `(company-tooltip-common ((t (:inherit font-lock-constant-face))))))
#+end_src
* Настройка =smart-tabs=
#+begin_src emacs-lisp
;(smart-tabs-insinuate 'c 'python)
#+end_src
* Настройка =gdb-many-window=
#+begin_src emacs-lisp
;;(setq
 ;; use gdb-many-windows by default
;; gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
;; gdb-show-main t
 ;;)
#+end_src
#+begin_src emacs-lisp
(setq gdb-many-windows nil)

(defun set-gdb-layout(&optional c-buffer)
  (if (not c-buffer)
      (setq c-buffer (window-buffer (selected-window)))) ;; save current buffer

  ;; from http://stackoverflow.com/q/39762833/846686
  (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed
  (switch-to-buffer gud-comint-buffer)
  (delete-other-windows) ;; clean all

  (let* (
         (w-source (selected-window)) ;; left top
         (w-gdb (split-window w-source nil 'right)) ;; right bottom
         (w-locals (split-window w-gdb nil 'above)) ;; right middle bottom
         (w-stack (split-window w-locals nil 'above)) ;; right middle top
         (w-breakpoints (split-window w-stack nil 'above)) ;; right top
         (w-io (split-window w-source (floor(* 0.9 (window-body-height)))
                             'below)) ;; left bottom
         )
    (set-window-buffer w-io (gdb-get-buffer-create 'gdb-inferior-io))
    (set-window-dedicated-p w-io t)
    (set-window-buffer w-breakpoints (gdb-get-buffer-create 'gdb-breakpoints-buffer))
    (set-window-dedicated-p w-breakpoints t)
    (set-window-buffer w-locals (gdb-get-buffer-create 'gdb-locals-buffer))
    (set-window-dedicated-p w-locals t)
    (set-window-buffer w-stack (gdb-get-buffer-create 'gdb-stack-buffer))
    (set-window-dedicated-p w-stack t)

    (set-window-buffer w-gdb gud-comint-buffer)

    (select-window w-source)
    (set-window-buffer w-source c-buffer)
    ))
(defadvice gdb (around args activate)
  "Change the way to gdb works."
  (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing)
  (let (
        (c-buffer (window-buffer (selected-window))) ;; save current buffer
        )
    ad-do-it
    (set-gdb-layout c-buffer))
  )
(defadvice gdb-reset (around args activate)
  "Change the way to gdb exit."
  ad-do-it
  (set-window-configuration global-config-editing))
#+end_src
* Настройка =smartparens=
#+begin_src emacs-lisp
;(require 'smartparens-config)
;(add-hook 'prog-mode-hook #'smartparens-strict-mode)
#+end_src
* Настройка =anzu=
#+begin_src emacs-lisp
(use-package anzu
  :diminish
  :hook
  (after-init . global-anzu-mode)
  :config
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
)
  ;; (setq anzu-cons-mode-line-p nil)
  ;; (setcar (cdr (assq 'isearch-mode minor-mode-alist))
  ;; '(:eval (anzu--update-mode-line)))
  
#+end_src
