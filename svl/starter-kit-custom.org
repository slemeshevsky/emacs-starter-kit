#+TITLE: Настройка внешнего вида (цветовых тем, шрифтов и т.п.)
* Загрузка дополнительных цветовых (кастомных) тем
** Тема ~zenburn~
   #+begin_src emacs-lisp
;(require 'zenburn-theme)
   #+end_src
** Темы ~solarized~
 #+begin_src emacs-lisp
;(require 'sanityinc-solarized-dark-theme)
;(require 'sanityinc-solarized-light-theme)
 #+end_src 
** Тема ~wombat~
#+begin_src emacs-lisp
;(require 'color-theme-wombat)
#+end_src
** Alect Themes
#+begin_src emacs-lisp
;(require 'alect-themes)
#+end_src
* Включение понравившейся цветовой темы
  Мне понравились:
** Solarized-Dark
#+begin_src emacs-lisp
;(load-theme 'sanityinc-solarized-dark t)
#+end_src
** Solarized-Light
#+begin_src emacs-lisp
; (load-theme 'solarized-light t)
#+end_src
** Wombat
#+begin_src emacs-lisp
;;(color-theme-wombat)
#+end_src
** Classic
#+begin_src emacs-lisp
;(color-theme-classic)
#+end_src
** Zenburn
#+begin_src emacs-lisp
;(load-theme 'zenburn t)
#+end_src
** Euphoria
#+begin_src emacs-lisp
;(color-theme-euphoria)
#+end_src
** Professional Theme
#+begin_src emacs-lisp
;(load-theme 'professional t)
#+end_src
** Alect Theme Black
#+begin_src emacs-lisp
;(load-theme 'alect-black t)
#+end_src
** Alect Theme Dark
#+begin_src emacs-lisp
;(load-theme 'alect-dark t)
#+end_src
** Alect Theme Light
#+begin_src emacs-lisp
;(load-theme 'alect-light t)
#+end_src
** Tomorrow Day
#+begin_src emacs-lisp
;(color-theme-sanityinc-tomorrow-day)
#+end_src
** Autumn light
#+begin_src emacs-lisp
;(load-theme 'autumn-light t)
#+end_src
** FaltUI
#+begin_src emacs-lisp
;(load-theme 'flatui t)
#+end_src
** Material
#+begin_src emacs-lisp
;(load-theme 'material t)
#+end_src
** Material Light
#+begin_src emacs-lisp
;(load-theme 'material-light t)
#+end_src
** Aurora
#+begin_src emacs-lisp
;(load-theme 'aurora t)
#+end_src
** Anti-Zenburn
#+begin_src emacs-lisp
; (load-theme 'anti-zenburn t)
#+end_src
** Github theme 
#+begin_src emacs-lisp
;(load-theme 'github t)
#+end_src
** Spacemacs
#+begin_src emacs-lisp
  (load-theme 'spacemacs-light t)
  (setq spacemacs-theme-comment-italic t)
  (setq spacemacs-theme-custom-colors 
	  '((comment . "#808080")))
  ;(load-theme 'spacemacs-dark t)
#+end_src
** Leuven
#+begin_src emacs-lisp
;(load-theme 'leuven t)
#+end_src
** Doom-themes
#+begin_src emacs-lisp
  ;; (require 'doom-themes)
  ;; ;; Global settings (defaults)
  ;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;       doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; (load-theme 'doom-nord-light t)
  ;; (doom-themes-treemacs-config)
  ;; (doom-themes-org-config)
#+end_src
* Установка =default= шрифта «Consolas»
#+begin_src emacs_lisp
(set-default-font "Consolas-12")
#+end_src
* Установка =powerline=
#+begin_src emacs-lisp
(require 'powerline)
(powerline-default-theme)
#+end_src
** Использование =spaceline=
#+begin_src emacs-lisp
(require 'spaceline-config)
(setq powerline-default-separator 'wave)
(spaceline-emacs-theme)
(require 'spaceline-all-the-icons)
;(spaceline-highlight-face-modified)
(setq spaceline-highlight-face-func 'spaceline-highlight-face-modified)
;(spaceline-define-segment datetime
;  (shell-command-to-string "echo -n $(date '+%a %d %b %I:%M%p')"))
;(spaceline-spacemacs-theme 'datetime)
(spaceline-all-the-icons--setup-neotree)
(spaceline-toggle-minor-modes-off)
;(spaceline-helm-mode)
#+end_src
** Цвета ~solarized~ для =powerline=
#+begin_src emacs-lisp
   ;; (setq powerline-color1 "#073642")
   ;; (setq powerline-color2 "#002b36")
   ;; (set-face-attribute 'mode-line nil
   ;;                     :foreground "#fdf6e3"
   ;;                     :background "#2aa198"
   ;;                     :box nil)
   ;; (set-face-attribute 'mode-line-inactive nil
   ;;                     :box nil)
  (spaceline-compile)
#+end_src
** Еще один вариант цветов ~solarized~
#+begin_src emacs-lisp
  ;; (setq powerline-color1 "#657b83")
  ;; (setq powerline-color2 "#839496")
  ;; (set-face-attribute 'mode-line nil
  ;;                     :foreground "#fdf6e3"
  ;;                     :background "#073642"
  ;;                     :box nil)
  ;; (set-face-attribute 'mode-line-inactive nil
  ;;                     :box nil)
#+end_src
** Еще цвета
#+begin_src emacs-lisp
  ;; (custom-set-faces
  ;;  '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
  ;;  '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))
#+end_src
* Настройка =dired=
** Режим (не)показа скрытых файлов
 #+begin_src emacs-lisp
 (defun my-dired-mode-hook ()
   "My `dired' mode hook."
   ;; To hide dot-files by default
   (dired-hide-dotfiles-mode)

   ;; To toggle hiding
   (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))

 (add-hook 'dired-mode-hook #'my-dired-mode-hook)
 #+end_src
** Сортировка 
#+begin_src emacs-lisp
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header 
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
  (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding marks."
  (mydired-sort))
#+end_src
** Показ иконок
   #+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-icon-mode)
   #+end_src
