#+TITLE: Orgmode configuration
* Включение режима Org для файлов с расширением =.org= и =.pub=
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.pub$\\'" . org-mode))
#+end_src

* Активация ~remember-mode~
#+begin_src emacs-lisp
(require 'remember)
;(org-remember-insinuate)
#+end_src

* Установка комбинаций клавиш
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
;(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-iswitchb)
(global-set-key "\C-cr" 'org-capture)
(defun open-org-journal-file ()
  (interactive)
  (find-file "~/Dropbox/org/journal.org"))
(global-set-key "\C-cj" 'open-org-journal-file)
#+end_src

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

* Мои =.org= файлы для реализации *GTD*
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Dropbox/org/gtd.org"
                             "~/Dropbox/org/someday.org" 
			     "~/Dropbox/org/journal.org"))
#+end_src

* Настройка шаблонов ~remember~
#+begin_src emacs-lisp
(defvar my/org-contacts-template "* %(org-contacts-template-name)
:PROPERTIES:
:ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %(org-contacts-template-email)
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/gtd.org" "ЗАДАЧИ") 
		 "** ❏ %^{Brief Description} %^g\n%?\n%a\nAdded: %U" )
	("w" "Wating" entry (file+headline "~/Dropbox/org/gtd.org" "ЗАДАЧИ") 
		 "** ⚑ %^{Brief Description} %^g\n%?\n%a\nAdded: %U" )
	("c" "Call" entry (file+headline "~/Dropbox/org/gtd.org" "ЗАДАЧИ")
		 "** ☎ %^{Brief Description} %^g\n%?\nAdded: %U" )
	("o" "Outside"  (file+headline "~/Dropbox/org/gtd.org" "ЗАДАЧИ")
		 "** %^{Brief Description} %^g\n%?\nAdded: %U" )
	("j" "Journal" entry (file+headline "~/Dropbox/org/journal.org" "Заметки")
		 "** %^{Head Line} %U %^g\n%i%?" )
	("s" "Someday" entry (file+headline "~/Dropbox/org/someday.org" "Когда-нибудь/может быть")
		 "** %^{Someday Heading} %U\n%?\n" )
	("a" "Контакт" entry (file+headline "~/Dropbox/org/contacts/contacts.org" "Несортированные контакты")
	"** %^{Имя Фамилия} \n:PROPERTIES:\n:CELL: +375 %^{cc xxx-xx-xx}\n:BIRTHDAY: %^{yyyy-mm-dd}\n:EMAIL: %^{email}\n:END:")))
#+end_src

* Настройка ~org-super-agenda~
  #+begin_src emacs-lisp
(require 'org-super-agenda)
(org-super-agenda-mode 1)
  #+end_src

* Настройка ~calfw-org~
** Подключение
#+begin_src emacs-lisp
(require 'calfw-org)
;; Month
(setq calendar-month-name-array
["Январь" "Февраль" "Март"     "Апрель"   "Май"      "Июнь"
"Июль"    "Август" "Сентябрь" "Октябрь" "Ноярь" "Декабрь"])
    
;; Week days
(setq calendar-day-name-array
["Воскресенье" "Понедельник" "Вторник" "Среда" "Четверг" "Пятница" "Суббота"])
;; First day of the week
(setq calendar-week-start-day 1)
#+end_src
* Настройка показа буфера ~Agenda~
#+begin_src emacs-lisp
    (setq org-deadline-warning-days 0)
    (setq org-mobile-directory "~/Dropbox/Public/MobileOrg/")
    (setq org-directory "~/Dropbox/org/")
    (setq org-mobile-inbox-for-pull "~/Dropbox/org/inbox.org")
    (setq org-agenda-block-separator " ") ;; 9473)
    (setq org-agenda-prefix-format 
		  '((agenda . " %i %-30:c%?-12t% s")
		    (timeline . "  % s")
		    (todo . " %i %-30:c")
		    (tags . " %i %-30:c")
		    (search . " %i %-30:c")))
    (setq org-super-agenda-unmatched-name "")
    (setq org-super-agenda-header-separator (concat "\n" (make-string 212 ?\u2500) "\n"))
    (setq org-agenda-custom-commands
	'(("d" "Список дел"
	   ((agenda "" ((org-agenda-span 'day)
	                (org-super-agenda-groups
	 	         '((:log t)
			   (:name "Расписание" 
			          :time-grid t)
			   (:name "Сегодня" 
			          :scheduled today)
			   (:name "Запланировано ранее" 
			  	  :scheduled past)))))
	     (alltodo "" ((org-agenda-overriding-header "")
	                  (org-super-agenda-groups
	    		   '((:name "Важное"
			         :priority "A"
				 :order 2)
			     (:name "Закончить сегодня" 
				 :deadline today
				 :order 1)
			     (:name "Скоро срок окончания" 
			         :and (:deadline future :not (:todo "⚑")))
			     (:name "Просроченные" 
				 :deadline past
				 :order 3)
			     (:name "Ожидание ..." 
		                 :todo "⚑"
			 	 :order 4)
			     (:name "Неважное"
			         :priority<= "C"
				 :category "Когда-нибудь/может быть"
				 :order 90)
			     (:name "Зависшее"
			         :and (:scheduled nil :todo "❏")
				 :order 91)
			     (:discard (:and (:scheduled t)))))))))))
#+end_src
* Настройка рефайлинга
#+begin_src emacs-lisp
(setq org-refile-targets (quote (("gtd.org" :maxlevel . 2)
				 ("someday.org" :level . 2))))
#+end_src
* Функция для =TODO= записи зависящей от нескольких вложенных
  #+begin_src emacs-lisp
  (defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "❏" "✔"))))
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

* Реализация таймера *Pomodoro*
#  #+begin_src emacs-lisp
#  (add-to-list 'org-modules 'org-timer) ;; Activate the org-timer module 
#  (setq org-timer-default-timer 25) ;; Set a default value for the timer, for example
#  (add-hook 'org-clock-in-hook 
#  	  '(lambda ()  
#  	     (if (not org-timer-current-timer) (org-timer-set-timer '(16)))
#  	     )
#  ) 
#  (add-hook 'org-clock-out-hook
#  	  '(lambda ()  (setq org-mode-line-string nil)))

#  (add-hook 'org-timer-done-hook 
#  	  '(lambda () 
#  	     (start-process "orgmode" nil "~/Dropbox/org/scripts/pomodoro")
#  	     ) 
#  )
# #+end_src

* Настройка ~org-pomodoro~
#+begin_src emacs-lisp
(use-package org-pomodoro
  :after org-agenda
  :init (setq org-pomodoro-keep-killed-pomodoro-time t)
  :bind (:map org-agenda-mode-map
              ("P" . org-pomodoro)))
#+end_src
* Использование режима ~org-bullets~
#+begin_src emacs-lisp
(require 'org-bullets)
(setq org-bullets-bullet-list
'("◎" "◉" "⚫" "⚪" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* Реализация напоминаний о событиях
#+begin_src emacs-lisp
(require 'appt)
(appt-activate t)

(setq appt-message-warning-time 60) ; Show notification 5 minutes before event
(setq appt-display-interval appt-message-warning-time) ; Disable multiple reminders
(setq appt-display-mode-line nil)

; Use appointment data from org-mode
(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

; Update alarms when...
; (1) ... Starting Emacs
(my-org-agenda-to-appt)

; (2) ... Everyday at 12:05am (useful in case you keep Emacs always on)
(run-at-time "12:05am" (* 24 3600) 'my-org-agenda-to-appt)

; Display appointments as a window manager notification
(setq appt-disp-window-function 'my-appt-display)
(setq appt-delete-window-function (lambda () t))

(setq my-appt-notification-app (concat (getenv "HOME") "/Dropbox/org/scripts/appt-notification"))

(defun my-appt-display (min-to-app new-time msg)
  (if (atom min-to-app)
    (start-process "my-appt-notification-app" nil my-appt-notification-app min-to-app msg)
  (dolist (i (number-sequence 0 (1- (length min-to-app))))
    (start-process "my-appt-notification-app" nil my-appt-notification-app (nth i min-to-app) (nth i msg)))))
#+end_src

* Включаем ~typopunt~ в режиме ~org-mode~
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-typopunct-mode)
#+end_src
* Открываем doc файлы в режиме ~org-mode~ во внешних приложениях
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  '(lambda ()
        (setq org-file-apps
              (append '(
                        ("\\.doc\\'" . default)
                       ) org-file-apps
              )
        )
   )
)
(add-hook 'org-mode-hook
  '(lambda ()
        (setq org-file-apps
              (append '(
                        ("\\.odt\\'" . default)
                       ) org-file-apps
              )
        )
   )
)
#+end_src

* Добавляем шифрования файла с паролем для календаря
#+begin_src emacs-lisp
(require 'epa-file)  
#+end_src
* Натройка ~org-ref~
** Основные настройки
 #+begin_src emacs-lisp
 (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib"
       bibtex-completion-library-path "~/Dropbox/bibliography/bibtex-pdfs")
 #+end_src
** Подключение
 #+begin_src emacs-lisp
 (require 'org-ref)
 #+end_src
* Пакет ~org-vcard~
  #+begin_src emacs-lisp
  (require 'org-vcard)
  #+end_src
* Настройка ~org-contacts~
#+begin_src emacs-lisp
(require 'org-contacts)
(setq org-contacts-files '("~/Dropbox/org/contacts/contacts.org"))
#+end_src
