#+TITLE: Emacs Starter Kit
* Отключение переноса строк
#+begin_src emacs-lisp
(setq truncate-lines t)
#+end_src
* Определение загрузочных файлов и установки загрузочных путей
#+begin_src emacs-lisp  
(setq dotfiles-dir (file-name-directory
                     (or load-file-name (buffer-file-name))))
  
;(add-to-list 'load-path dotfiles-dir)
(setq package-user-dir (concat dotfiles-dir "elpa"))
#+end_src

* Загружаем пакетный менеджер ELPA
#+begin_src emacs-lisp  
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("elpa" . "http://tromey.com/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+end_src

* Установка пакетов из ELPA по списку.
#+begin_src emacs-lisp  
(when (not package-archive-contents)
  (package-refresh-contents))
(defvar my-packages '(auctex reftex company company-auctex company-cmake 
magit ido hideshow perspective projectile projectile-speedbar persp-projectile 
ibuffer-projectile helm helm-core helm-bibtex helm-gtags helm-projectile python-mode 
pydoc ipython auto-complete cmake-mode sr-speedbar yasnippet yasnippet-snippets column-marker 
mu4e-alert mu4e-conversation treemacs treemacs-projectile
smart-tabs-mode professional-theme alect-themes material-theme web-mode anti-zenburn-theme function-args)
"A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+end_src
  Мои настройки для ~org-mode~, ~auctex~, а также файл для настройки
  кастомизации хранятся в каталоге =svl/= ветки =svl=

* Определение файлов настроек, специфичных для пользователя и машины.
#+begin_src emacs-lisp  
(setq system-specific-config (concat dotfiles-dir system-name ".el")
          system-specific-literate-config (concat dotfiles-dir system-name ".org")
          user-specific-config (concat dotfiles-dir user-login-name ".el")
          user-specific-literate-config (concat dotfiles-dir user-login-name ".org")
          user-specific-dir (concat dotfiles-dir user-login-name))
    (add-to-list 'load-path user-specific-dir)
#+end_src
* Пакеты emacs-lisp, загруженные из директории =src= замещают те, что установлены через ELPA. 
  Это полезно если вы используете самые свежие версии пакетов или если их нет в ELPA.
#+begin_src emacs-lisp  
(add-to-list 'load-path sitelisp-dir)
#+end_src

* Этот код загружает цветовые темы, тем самым делая их доступными по-умолчанию.
#+begin_src emacs-lisp  
(add-to-list 'load-path (expand-file-name "color-theme" sitelisp-dir))
(require 'color-theme)
(eval-after-load "color-theme"
 '(progn (color-theme-initialize)))
#+end_src
* Регистрируем Emacs как клиент сессии Gnome
#+begin_src emacs-lisp
;;; save & shutdown when we get an "end of session" signal on dbus 
(require 'dbus)

(defun my-register-signals (client-path)
  "Register for the 'QueryEndSession' and 'EndSession' signals from
Gnome SessionManager.

When we receive 'QueryEndSession', we just respond with
'EndSessionResponse(true, \"\")'.  When we receive 'EndSession', we
append this EndSessionResponse to kill-emacs-hook, and then call
kill-emacs.  This way, we can shut down the Emacs daemon cleanly
before we send our 'ok' to the SessionManager."
  (setq my-gnome-client-path client-path)
  (let ( (end-session-response (lambda (&optional arg)
                                 (dbus-call-method-asynchronously
                                  :session "org.gnome.SessionManager" my-gnome-client-path
                                  "org.gnome.SessionManager.ClientPrivate" "EndSessionResponse" nil
                                  t "") ) ) )
         (dbus-register-signal
          :session "org.gnome.SessionManager" my-gnome-client-path
          "org.gnome.SessionManager.ClientPrivate" "QueryEndSession"
          end-session-response )
         (dbus-register-signal
          :session "org.gnome.SessionManager" my-gnome-client-path
          "org.gnome.SessionManager.ClientPrivate" "EndSession"
          `(lambda (arg)
             (add-hook 'kill-emacs-hook ,end-session-response t)
             (kill-emacs) ) ) ) )

;; DESKTOP_AUTOSTART_ID is set by the Gnome desktop manager when emacs
;; is autostarted.  We can use it to register as a client with gnome
;; SessionManager.
(dbus-call-method-asynchronously
 :session "org.gnome.SessionManager"
 "/org/gnome/SessionManager" 
 "org.gnome.SessionManager" "RegisterClient" 'my-register-signals
 "Emacs server" (getenv "DESKTOP_AUTOSTART_ID"))
#+end_src
* Прикручиваем типографику к Emacs
#+begin_src emacs-lisp  
(require 'typopunct)
(setq-default typopunct-buffer-language 'russian)
;; Функция включает typopunct-mode.
(defun turn-on-typopunct-mode ()
  (typopunct-mode t))
#+end_src

* Браузер
# #+begin_src emacs-lisp  
# (setq browse-url-browser-function 'browse-url-generic
#       browse-url-generic-program "google-chrome")
# #+end_src
  
* Включить подсветку синтаксиса для старых эмаксов.
#+begin_src emacs-lisp  
(global-font-lock-mode t)
#+end_src

* Подсвечивать совпадающие скобки
#+begin_src emacs-lisp  
;(setq show-paren-style 'expression)
(show-paren-mode 1)
#+end_src

* Подсвечивать текущую строку
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

* Подключаем ESS
#+begin_src emacs-lisp  
;(require 'ess-site)
;(require 'r-autoyas)
;(add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
#+end_src

* Печать кириллицы в ~postscript~
#+begin_src emacs-lisp  
(load-library "ps-mule") 
(setq bdf-directory-list '("/usr/share/emacs/fonts/bdf")) 
(setq ps-mule-font-info-database-default ps-mule-font-info-database-bdf) 
(setq ps-multibyte-buffer 'bdf-font-except-latin)
#+end_src

* Загрузка настроек конкретного пользователя и машины
#+begin_src emacs-lisp  
(if (file-exists-p sitelisp-dir)
  (let ((default-directory sitelisp-dir))
    (normal-top-level-add-subdirs-to-load-path)))
 (if (file-exists-p user-specific-config) (load user-specific-config))
(if (file-exists-p user-specific-literate-config)
    (org-babel-load-file user-specific-literate-config))
(when (file-exists-p user-specific-dir)
  (let ((default-directory user-specific-dir))
    (mapc #'load (directory-files user-specific-dir nil ".*el$"))
     (mapc #'org-babel-load-file (directory-files user-specific-dir nil ".*org$"))))
 (if (file-exists-p system-specific-config) (load system-specific-config))
 (if (file-exists-p system-specific-literate-config)
     (org-babel-load-file system-specific-literate-config))
#+end_src

* Загрузка пакета =magit= при первом вызове команды ~magit-status~
#+begin_src emacs-lisp
(autoload 'magit-status "magit" nil t)
#+end_src

* Отключение панели инструментов
#+begin_src emacs-lisp
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

* Отключение меню
#+begin_src emacs-lisp
;;(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

* Размещаем окно emacs в левом верхнем углу
#+begin_src emacs-lisp
(setq initial-frame-alist '((top . 0) (left . 0) ))
#+end_src
  
* Устанавливаем режим =auto-fill=
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

* *Flyspell.* Код взят из [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki: Flyspell]]. Включаем ~flyspell~ в 
    режиме ~text-mode~ и отключаем его для режимов ~log-edit-mode~ и
    ~change-log-mode~
#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
     (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

Выбираем для проверки орфографии =aspell=
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
#+end_src

Если ~flyspell~ используется с программой ~aspell~ вместо ~ispell~
нужно добавить следующую команду:
#+begin_src emacs-lisp
(setq ispell-list-command "--list")
#+end_src
Из-за того, что опция =-l= означает =--lang= в ~aspell~, а в ~ispell~
=-l= означает =--list=, ~flyspell-buffer~ и ~flyspell-region~ страдают
от этой проблемы.

Меняем словари. Для переключения между английским и русским можно
использовать следующую функцию
#+begin_src emacs-lisp
(defun fd-switch-dictionary()
(interactive)
(let* ((dic ispell-current-dictionary)
   (change (if (string= dic "russian") "english" "russian")))
   (ispell-change-dictionary change)
   (message "Dictionary switched from %s to %s" dic change)
))
    
(global-set-key (kbd "<f8>")   'fd-switch-dictionary)
#+end_src

* Подключаем ~lambda-mode~
#+begin_src emacs-lisp
(require 'lambda-mode)
(add-hook 'org-mode-hook 'lambda-mode 1)
(add-hook 'emacs-lisp-mode-hook 'lambda-mode 1)
(setq lambda-symbol (string (make-char 'greek-iso8859-7 107)))
#+end_src
  
* Подключаем ~ido~
#+begin_src emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matchingido-enable-flex-matching 1)
#+end_src

* Отключение полосы прокрутки
#+begin_src emacs-lisp
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

* Не создавать ~backup~, ~.saves~ и ~auto saving~ файлов
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-list-file-name nil)
(setq auto-save-default nil)
#+end_src

* Включение режима ~bs~ для отображения буфера с открытыми файлами
    (плагин buffer show)
#+begin_src emacs-lisp
(require 'bs)
(setq bs-configurations
      '(("files" "^\\*scratch\\*" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last)))
(add-to-list 'bs-configurations
                 '("C++" nil nil nil
                   (lambda (buf)
                      (with-current-buffer buf
                         (not (memq major-mode
                            '(sql-interactive-mode cc-mode))))) nil))
;(global-set-key (kbd "<f2>") 'ibuffer-bs-show)
#+end_src
* Настройка ~ibuffer~
  #+begin_src emacs-lisp
(defun my/ibuffer-customization ()
          ;; ibuffer-projectile setup
          (ibuffer-projectile-set-filter-groups)
          (unless (eq ibuffer-sorting-mode 'alphabetic)
            (ibuffer-do-sort-by-alphabetic) ; first do alphabetic sort
            (ibuffer-do-sort-by-major-mode)))
(add-hook 'ibuffer-hook 'my/ibuffer-customization)
(setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("planner" (or
                               (name . "^\\*Calendar\\*$")
                               (name . "^diary$")
                               (mode . muse-mode)
                               (name . "^\\.org")))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("C++" (or
                             (mode . cc-mode)))
                   ("Python" (or
                             (mode . python-mode)))
))))
;;(add-hook 'ibuffer-mode-hook
;;              (lambda ()
;;                (ibuffer-switch-to-saved-filter-groups "default")))
  #+end_src

* Включение и настройка ~yasnippet~
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src

* Отключение =Version Control (vc)=
#+begin_src emacs-lisp
(setq vc-handled-backends nil)
#+end_src

* Включение номеров строк слева и показ номера колонки
** Определение функции
#+begin_src emacs-lisp
(require 'linum)
(defun switch-linum-mode-hook ()
  (linum-mode t))
#+end_src
** Включение номеров строк в режимах программирования
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'switch-linum-mode-hook)
(add-hook 'python-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах программирования на C/C++
#+begin_src emacs-lisp
;;(add-hook 'c-mode-hook 'switch-linum-mode-hook)
;;(add-hook 'c++-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах =cmake-mode=, =makefile-mode=
#+begin_src emacs-lisp
(add-hook 'cmake-mode-hook 'switch-linum-mode-hook)
#+end_src
** Включение номеров строк в режимах =latex= и =ess=
   #+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'switch-linum-mode-hook)
;(add-hook 'ess-mode-hook 'switch-linum-mode-hook)
   #+end_src
** Показ номера колонки
#+begin_src emacs-lisp
(column-number-mode t)
#+end_src
* Отмечаем правую границу
** Пакет =column-maker=
# #+begin_src emacs-lisp
# (require 'column-marker)
# (add-hook 'prog-mode-hook (lambda () (interactive) (column-marker-1 80)))
# (add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))
# #+end_src
** Пакет =fill-column-indicator=
#+begin_src emacs-lisp
(require 'fill-column-indicator)
(setq fci-rule-width 2)
(setq fci-rule-column 80)
(add-hook 'prog-mode-hook 'fci-mode)
(add-hook 'python-mode-hook 'fci-mode)
#+end_src

* Включение режима ~smart-tabs-mode~
  #+begin_src emacs-lisp
(smart-tabs-insinuate 'c 'c++ 'python)
(setq-default tab-width 4)
(add-hook 'prog-mode-hook
          (lambda () (setq indent-tabs-mode t)))
(add-hook 'c-mode-common-hook
          (lambda () (setq indent-tabs-mode t)))
(add-hook 'python-mode-hook
          (lambda () (setq indent-tabs-mode t)))
(add-hook 'python-mode-hook
		  (lambda () (setq tab-width 4)))
#+end_src

* Замена «yes или no» на «y or n»
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Убрать предупреждение =ad-redefinition-action=
#+begin_src emacs-lisp
(setq ad-redefinition-action 'accept)
#+end_src
* Подключаем ~doconce-mode~
#+begin_src emacs-lisp
  (defun switch-paragraph-indent-mode-hook ()
	(interactive)
	(paragraph-indent-minor-mode t))
  (require 'doconce-mode)
  (add-hook 'doconce-mode-hook 'switch-linum-mode-hook)
  (add-hook 'doconce-mode-hook 'turn-on-typopunct-mode)
#+end_src
* Подключаем ~bookmark+~
#+begin_src emacs-lisp
; (require 'bookmark+)
#+end_src
* Включение ~web-mode~ для файлов =.html=
#+begin_src emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+end_src
